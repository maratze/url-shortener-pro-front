import { ref } from 'vue';

export function useDeviceFingerprint() {
    const fingerprint = ref<string | null>(null);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fingerprint —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const generateFingerprint = async (): Promise<string> => {
        // –ï—Å–ª–∏ fingerprint —É–∂–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (fingerprint.value) {
            return fingerprint.value;
        }

        try {
            // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è fingerprint
            const components = [
                navigator.userAgent,
                navigator.language,
                new Date().getTimezoneOffset(),
                navigator.platform,
                navigator.vendor,
                screen.width + 'x' + screen.height,
                screen.colorDepth,
                navigator.hardwareConcurrency || '',
                // Fix: Add type assertion for deviceMemory, which is non-standard
                (navigator as any).deviceMemory || '',
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                'canvas:' + await getCanvasFingerprint(),
                'webgl:' + await getWebGLFingerprint(),
                'fonts:' + await getFontsFingerprint(),
                'audio:' + await getAudioFingerprint()
            ];

            // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            const fingerprintValue = await hashComponents(components.join('|'));
            fingerprint.value = fingerprintValue;

            return fingerprintValue;
        } catch (error) {
            console.error('Error generating fingerprint:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ö–µ—à
            const simpleFp = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
            fingerprint.value = simpleFp;
            return simpleFp;
        }
    };

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SubtleCrypto API
    const hashComponents = async (text: string): Promise<string> => {
        if (!window.crypto || !window.crypto.subtle) {
            // –ï—Å–ª–∏ SubtleCrypto –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ö–µ—à
            let hash = 0;
            for (let i = 0; i < text.length; i++) {
                const char = text.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash; // Convert to 32bit integer
            }
            return Math.abs(hash).toString(16);
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA-256 —á–µ—Ä–µ–∑ SubtleCrypto API
        const encoder = new TextEncoder();
        const data = encoder.encode(text);
        const hashBuffer = await window.crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

        return hashHex;
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ fingerprint –∏–∑ Canvas
    const getCanvasFingerprint = async (): Promise<string> => {
        try {
            const canvas = document.createElement('canvas');
            canvas.width = 200;
            canvas.height = 50;
            const ctx = canvas.getContext('2d');

            if (!ctx) return '';

            // –¢–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª–∏
            ctx.textBaseline = 'top';
            ctx.font = '14px Arial';
            ctx.fillStyle = '#1a73e8';
            ctx.fillText('TinyLink Canvas Fingerprint üëã', 10, 10);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            ctx.fillStyle = '#FF6347';
            ctx.fillRect(125, 25, 50, 10);
            ctx.fillStyle = '#6495ED';
            ctx.beginPath();
            ctx.arc(175, 10, 15, 0, Math.PI * 2, true);
            ctx.fill();

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ canvas
            const dataURL = canvas.toDataURL();

            // –•–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            return await hashComponents(dataURL);
        } catch (e) {
            return '';
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ fingerprint –∏–∑ WebGL
    const getWebGLFingerprint = async (): Promise<string> => {
        try {
            const canvas = document.createElement('canvas');
            // Fix: Add explicit type assertion for WebGLRenderingContext
            const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl') as WebGLRenderingContext | null;

            if (!gl) return '';

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WebGL
            const vendor = gl.getParameter(gl.VENDOR);
            const renderer = gl.getParameter(gl.RENDERER);
            const version = gl.getParameter(gl.VERSION);

            return await hashComponents(`${vendor}|${renderer}|${version}`);
        } catch (e) {
            return '';
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ fingerprint –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    const getFontsFingerprint = async (): Promise<string> => {
        try {
            // –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            const fonts = [
                'Arial', 'Courier New', 'Georgia', 'Times New Roman',
                'Trebuchet MS', 'Verdana', 'Helvetica', 'Comic Sans MS'
            ];

            const body = document.body;
            const testDiv = document.createElement('div');
            const testString = 'mmmmmmmmmmlli';

            // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
            testDiv.style.cssText = 'position: absolute; left: -9999px; visibility: hidden; display: block !important';

            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
            const baseFontSpan = document.createElement('span');
            baseFontSpan.style.cssText = 'font-family: monospace; font-size: 72px;';
            baseFontSpan.textContent = testString;

            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
            testDiv.appendChild(baseFontSpan);
            body.appendChild(testDiv);

            // –ò–∑–º–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ (–±–∞–∑–æ–≤–∞—è)
            const baseWidth = baseFontSpan.offsetWidth;
            const baseHeight = baseFontSpan.offsetHeight;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–∂–¥–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
            const detectedFonts = [];
            for (const font of fonts) {
                // –ú–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç
                baseFontSpan.style.fontFamily = `'${font}', monospace`;

                // –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - —à—Ä–∏—Ñ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                if (baseFontSpan.offsetWidth !== baseWidth || baseFontSpan.offsetHeight !== baseHeight) {
                    detectedFonts.push(font);
                }
            }

            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            body.removeChild(testDiv);

            return await hashComponents(detectedFonts.join('|'));
        } catch (e) {
            return '';
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ fingerprint –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
    const getAudioFingerprint = async (): Promise<string> => {
        try {
            if (!window.OfflineAudioContext) return '';

            const audioContext = new (window.OfflineAudioContext || (window as any).webkitOfflineAudioContext)(1, 5000, 44100);

            // –°–æ–∑–¥–∞–µ–º –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
            const oscillator = audioContext.createOscillator();
            const analyser = audioContext.createAnalyser();
            const gain = audioContext.createGain();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
            oscillator.type = 'triangle';
            oscillator.frequency.value = 10000;

            // –°–æ–µ–¥–∏–Ω—è–µ–º —É–∑–ª—ã
            gain.gain.value = 0.5;
            oscillator.connect(gain);
            gain.connect(analyser);
            analyser.connect(audioContext.destination);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
            oscillator.start(0);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ—Ä–µ–π–º–±—É—Ñ–µ—Ä–∞
            const audioData = await audioContext.startRendering();
            const audioSamples = new Float32Array(audioData.length);
            audioData.copyFromChannel(audioSamples, 0);

            // –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
            const keyPoints = [500, 1000, 1500, 2000, 2500];
            const samples = keyPoints.map(point => audioSamples[point]);

            // –•–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            return await hashComponents(samples.join('|'));
        } catch (e) {
            return '';
        }
    };

    return {
        fingerprint,
        generateFingerprint
    };
}